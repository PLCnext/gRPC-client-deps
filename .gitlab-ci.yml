include:
  - local: ci/gitlab_templates/RULES.yml

variables:
  ARTIFACT_PATH: ${CI_PROJECT_DIR}/result
  BUILDER_PREFIX: "ghcr.io/ipa-rwu/"
  BUILDER_SUFFIX: ":latest"
  BRIDGE_PROJECT_NUMBER: 1141
  CMAKE_ARGS: "-DCMAKE_BUILD_TYPE=RELEASE"
  DEFAULT_ROS_DISTROS: noetic foxy galactic rolling humble $CURRENT_ROS_DISTRO
  DOCKER_BUILDKIT: 1
  DOCKER_TLS_CERTDIR: ""
  FOLDER: ${CI_JOB_NAME}/
  NAME: ${CI_JOB_NAME}
  PREFIX: "${CI_PIPELINE_ID}:"
  ROS_DISTROS: foxy galactic humble noetic rolling
  ROS1_DISTROS: noetic
  ROS2_DISTROS: foxy galactic rolling humble
  STABLE_BRANCH: devel
  SUFFIX: ""
  TARGET_LATEST: ${NAME}:latest
  TARGET_RELEASE: ${NAME}:${CI_COMMIT_TAG//\//-}

.common:
  tags: &kaniko_runner
    - shared-runner-kubernetes

prepare:
  stage: check_ros_distro
  tags: *kaniko_runner
  image: alpine:latest
  script:
    - |
      for distro in $ROS_DISTROS; do
        raw=${CI_COMMIT_REF_NAME//\//-}
        if [ "$distro" = "${raw%%-*}" ] || [ "$distro" = "${CI_COMMIT_REF_NAME}" ] || [ "$distro" = "${raw%%_*}" ]; then
          echo "found"
          echo "CURRENT_ROS_DISTRO=$distro" >> build.env
          break
        fi
      done;
      if [[ ! -z "$CURRENT_ROS_DISTRO" ]]; then
        exit 1
        echo "Not found"
      fi
  artifacts:
    reports:
      dotenv: build.env

.build:
  stage: build
  tags: *kaniko_runner
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/${FOLDER}"
      --build-arg SUFFIX
      --build-arg PREFIX
      --build-arg BUILDER_PREFIX
      --build-arg BUILDER_SUFFIX
      --build-arg ROS_DISTRO
      --build-arg ROSINSTALL_CI_JOB_TOKEN=$ROSINSTALL_CI_JOB_TOKEN
      --build-arg CI_JOB_TOKEN=$CI_JOB_TOKEN
      --build-arg BUILDKIT_INLINE_CACHE=1
      --build-arg CMAKE_ARGS
      --dockerfile "${CI_PROJECT_DIR}/${FOLDER}Dockerfile"
      --no-push
      --destination "${PREFIX}${NAME}${SUFFIX}"
      --tarPath ${PREFIX//:/-}${NAME}${SUFFIX}.tar
  needs:
    - prepare
  variables:
    NAME: ${CI_JOB_NAME}_${ROS_DISTRO}
  artifacts:
    name: ${CI_JOB_NAME}_${ROS_DISTRO}
    paths:
      - ${PREFIX//:/-}${NAME}${SUFFIX}.tar
    expire_in: 10 minutes

phoenix_dependencies:
  extends:
    - .build
    - .on_allow_failure
  variables:
    NAME: phoenix_dependencies_${ROS_DISTRO}
    FOLDER: ""
  parallel:
    matrix:
      - ROS_DISTRO:
        - $CURRENT_ROS_DISTRO

.publish:
  stage: publish
  tags: *kaniko_runner
  image: alpine:latest
  script:
    - |
      TARGET=${NAME}:${CI_COMMIT_REF_NAME//\//-}
      if [ "$CI_COMMIT_REF_NAME" = "main" ] || [ "$CI_COMMIT_REF_NAME" = "master" ]; then
        TARGET=$TARGET_LATEST
      fi
      if [[ $(expr match "$CI_COMMIT_REF_NAME" ".*$STABLE_BRANCH") != 0 ]]; then
        TARGET=$TARGET_LATEST
      fi
      if [ $CI_COMMIT_TAG ]; then
        convert_tag=${CI_COMMIT_TAG//\//-}
        distro_prefix=${ROS_DISTRO}-
        remove_distro_tag=${convert_tag#"$distro_prefix"}
        TARGET_RELEASE=${NAME}:${remove_distro_tag}
        TARGET=$TARGET_RELEASE
      fi
    - mkdir ${ARTIFACT_PATH}
    - mv ${PREFIX//:/-}${NAME}${SUFFIX}.tar ${ARTIFACT_PATH}/${TARGET//:/-}.tar
  needs:
    - build
    - prepare
  artifacts:
    name: ${NAME}
    paths:
      - ${ARTIFACT_PATH}/*.tar
    expire_in: 10 minutes

publish:phoenix_dependencies:
  extends:
    - .publish
    - .on_merge_tag
  variables:
    NAME: phoenix_dependencies_${ROS_DISTRO}
  needs:
    - prepare
    - phoenix_dependencies
  parallel:
    matrix:
      - ROS_DISTRO:
        - $CURRENT_ROS_DISTRO

trigger_pipeline_in_bridge:
  tags: *kaniko_runner
  stage: trigger_bridge
  extends:
    - .on_merge_tag
  before_script:
    - apk add --no-cache curl
  script:
    - |
      for ros_distro in $ROS2_DISTROS; do
        if [ "$ros_distro" = "$CURRENT_ROS_DISTRO" ]; then
          ros_version=ros2
          break
        fi
      done
      for ros_distro in $ROS1_DISTROS; do
        if [ "$ros_distro" = "$CURRENT_ROS_DISTRO" ]; then
          ros_version=ros1
          break
        fi
      done
    - curl -X POST --fail -F token=$TRIGGER_BRIDGE_TOKEN -F ref=$ros_version/devel ${CI_API_V4_URL}/projects/${BRIDGE_PROJECT_NUMBER}/trigger/pipeline

stages:
  - check_ros_distro
  - build
  - publish
  - trigger_bridge
